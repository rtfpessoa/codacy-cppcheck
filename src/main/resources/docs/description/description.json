[
  {
    "patternId": "toomanyconfigs",
    "title": "Too many #ifdef configurations",
    "description": "Too many #ifdef configurations",
    "timeToFix": 5
  },
  {
    "patternId": "AssignmentAddressToInteger",
    "title": "Assigning a pointer to an integer is not portable.",
    "description": "Assigning a pointer to an integer is not portable.",
    "timeToFix": 5
  },
  {
    "patternId": "AssignmentIntegerToAddress",
    "title": "Assigning an integer to a pointer is not portable.",
    "description": "Assigning an integer to a pointer is not portable.",
    "timeToFix": 5
  },
  {
    "patternId": "CastIntegerToAddressAtReturn",
    "title": "Returning an integer in a function with pointer return type is not portable.",
    "description": "Returning an integer in a function with pointer return type is not portable.",
    "timeToFix": 5
  },
  {
    "patternId": "CastAddressToIntegerAtReturn",
    "title": "Returning an address value in a function with integer return type is not portable.",
    "description": "Returning an address value in a function with integer return type is not portable.",
    "timeToFix": 5
  },
  {
    "patternId": "assertWithSideEffect",
    "title": "Assert statement calls a function which may have desired side effects: 'function'.",
    "description": "Assert statement calls a function which may have desired side effects: 'function'.",
    "timeToFix": 5
  },
  {
    "patternId": "assignmentInAssert",
    "title": "Assert statement modifies 'var'.",
    "description": "Assert statement modifies 'var'.",
    "timeToFix": 5
  },
  {
    "patternId": "autoVariables",
    "title": "Address of local auto-variable assigned to a function parameter.",
    "description": "Address of local auto-variable assigned to a function parameter.",
    "timeToFix": 5
  },
  {
    "patternId": "returnAddressOfAutoVariable",
    "title": "Address of an auto-variable returned.",
    "description": "Address of an auto-variable returned.",
    "timeToFix": 5
  },
  {
    "patternId": "returnLocalVariable",
    "title": "Pointer to local array variable returned.",
    "description": "Pointer to local array variable returned.",
    "timeToFix": 5
  },
  {
    "patternId": "returnReference",
    "title": "Reference to auto variable returned.",
    "description": "Reference to auto variable returned.",
    "timeToFix": 5
  },
  {
    "patternId": "returnTempReference",
    "title": "Reference to temporary returned.",
    "description": "Reference to temporary returned.",
    "timeToFix": 5
  },
  {
    "patternId": "autovarInvalidDeallocation",
    "title": "Deallocation of an auto-variable results in undefined behaviour.",
    "description": "Deallocation of an auto-variable results in undefined behaviour.",
    "timeToFix": 5
  },
  {
    "patternId": "returnAddressOfFunctionParameter",
    "title": "Address of function parameter 'parameter' returned.",
    "description": "Address of function parameter 'parameter' returned.",
    "timeToFix": 5
  },
  {
    "patternId": "uselessAssignmentArg",
    "title": "Assignment of function parameter has no effect outside the function.",
    "description": "Assignment of function parameter has no effect outside the function.",
    "timeToFix": 5
  },
  {
    "patternId": "uselessAssignmentPtrArg",
    "title": "Assignment of function parameter has no effect outside the function",
    "description": "Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?",
    "timeToFix": 5
  },
  {
    "patternId": "assignBoolToPointer",
    "title": "Boolean value assigned to pointer.",
    "description": "Boolean value assigned to pointer.",
    "timeToFix": 5
  },
  {
    "patternId": "comparisonOfFuncReturningBoolError",
    "title": "Comparison of a function returning boolean value using relational (<, >, <= or >=) operator.",
    "description": "Comparison of a function returning boolean value using relational (<, >, <= or >=) operator.",
    "timeToFix": 5
  },
  {
    "patternId": "comparisonOfTwoFuncsReturningBoolError",
    "title": "Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator.",
    "description": "Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator.",
    "timeToFix": 5
  },
  {
    "patternId": "comparisonOfBoolWithBoolError",
    "title": "Comparison of a variable having boolean value using relational (<, >, <= or >=) operator.",
    "description": "Comparison of a variable having boolean value using relational (<, >, <= or >=) operator.",
    "timeToFix": 5
  },
  {
    "patternId": "incrementboolean",
    "title": "Incrementing a variable of type 'bool' with postfix operator++",
    "description": "Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "comparisonOfBoolWithInt",
    "title": "Comparison of a boolean with an integer that is neither 1 nor 0.",
    "description": "Comparison of a boolean with an integer that is neither 1 nor 0.",
    "timeToFix": 5
  },
  {
    "patternId": "compareBoolExpressionWithInt",
    "title": "Comparison of a boolean expression with an integer other than 0 or 1.",
    "description": "Comparison of a boolean expression with an integer other than 0 or 1.",
    "timeToFix": 5
  },
  {
    "patternId": "pointerArithBool",
    "title": "Converting pointer arithmetic result to bool.",
    "description": "Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour.",
    "timeToFix": 5
  },
  {
    "patternId": "boostForeachError",
    "title": "BOOST_FOREACH caches the end() iterator.",
    "description": "BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.",
    "timeToFix": 5
  },
  {
    "patternId": "arrayIndexOutOfBounds",
    "title": "Array 'array[2]' index array[1][1] out of bounds.",
    "description": "Array 'array[2]' index array[1][1] out of bounds.",
    "timeToFix": 5
  },
  {
    "patternId": "bufferAccessOutOfBounds",
    "title": "Buffer is accessed out of bounds: buffer",
    "description": "Buffer is accessed out of bounds: buffer",
    "timeToFix": 5
  },
  {
    "patternId": "strncatUsage",
    "title": "Dangerous usage of strncat",
    "description": "Dangerous usage of strncat - 3rd parameter is the maximum number of characters to append.",
    "timeToFix": 5
  },
  {
    "patternId": "outOfBounds",
    "title": "index is out of bounds",
    "description": "index is out of bounds: Supplied size 2 is larger than actual size 1.",
    "timeToFix": 5
  },
  {
    "patternId": "sizeArgumentAsChar",
    "title": "The size argument is given as a char constant.",
    "description": "The size argument is given as a char constant.",
    "timeToFix": 5
  },
  {
    "patternId": "negativeIndex",
    "title": "Array index -1 is out of bounds.",
    "description": "Array index -1 is out of bounds.",
    "timeToFix": 5
  },
  {
    "patternId": "insecureCmdLineArgs",
    "title": "Buffer overrun possible for long command line arguments.",
    "description": "Buffer overrun possible for long command line arguments.",
    "timeToFix": 5
  },
  {
    "patternId": "pointerOutOfBounds",
    "title": "Undefined behaviour, pointer arithmetic '' is out of bounds.",
    "description": "Undefined behaviour, pointer arithmetic '' is out of bounds.",
    "timeToFix": 5
  },
  {
    "patternId": "arrayIndexThenCheck",
    "title": "Array index 'index' is used before limits check.",
    "description": "Array index 'index' is used before limits check.",
    "timeToFix": 5
  },
  {
    "patternId": "possibleBufferAccessOutOfBounds",
    "title": "Possible buffer overflow",
    "description": "Possible buffer overflow if strlen(source) is larger than or equal to sizeof(destination).",
    "timeToFix": 5
  },
  {
    "patternId": "argumentSize",
    "title": "The array 'array' is too small",
    "description": "The array 'array' is too small, the function 'function' expects a bigger one.",
    "timeToFix": 5
  },
  {
    "patternId": "negativeMemoryAllocationSize",
    "title": "Memory allocation size is negative.",
    "description": "Memory allocation size is negative.",
    "timeToFix": 5
  },
  {
    "patternId": "negativeArraySize",
    "title": "Declaration of array '' with negative size is undefined behaviour",
    "description": "Declaration of array '' with negative size is undefined behaviour",
    "timeToFix": 5
  },
  {
    "patternId": "arrayIndexOutOfBoundsCond",
    "title": "Array 'x[10]' accessed at index 20, which is out of bounds",
    "description": "Array 'x[10]' accessed at index 20, which is out of bounds. Otherwise condition 'y==20' is redundant.",
    "timeToFix": 5
  },
  {
    "patternId": "noConstructor",
    "title": "The class 'classname' does not have a constructor.",
    "description": "The class 'classname' does not have a constructor.",
    "timeToFix": 5
  },
  {
    "patternId": "noExplicitConstructor",
    "title": "Class 'classname' has a constructor with 1 argument that is not explicit.",
    "description": "Class 'classname' has a constructor with 1 argument that is not explicit.",
    "timeToFix": 5
  },
  {
    "patternId": "noExplicitCopyMoveConstructor",
    "title": "Abstract class 'classname' has a copy/move constructor that is not explicit.",
    "description": "Abstract class 'classname' has a copy/move constructor that is not explicit.",
    "timeToFix": 5
  },
  {
    "patternId": "copyCtorPointerCopying",
    "title": "Value of pointer 'var', which points to allocated memory, is copied in copy constructor instead of allocating new memory.",
    "description": "Value of pointer 'var', which points to allocated memory, is copied in copy constructor instead of allocating new memory.",
    "timeToFix": 5
  },
  {
    "patternId": "noCopyConstructor",
    "title": "'class class' does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.",
    "description": "'class class' does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.",
    "timeToFix": 5
  },
  {
    "patternId": "uninitMemberVar",
    "title": "Member variable 'classname::varname' is not initialized in the constructor.",
    "description": "Member variable 'classname::varname' is not initialized in the constructor.",
    "timeToFix": 5
  },
  {
    "patternId": "operatorEqVarError",
    "title": "Member variable 'classname::' is not assigned a value in 'classname::operator='.",
    "description": "Member variable 'classname::' is not assigned a value in 'classname::operator='.",
    "timeToFix": 5
  },
  {
    "patternId": "unusedPrivateFunction",
    "title": "Unused private function: 'classname::funcname'",
    "description": "Unused private function: 'classname::funcname'",
    "timeToFix": 5
  },
  {
    "patternId": "memsetClass",
    "title": "Using 'memfunc' on class that contains a classname.",
    "description": "Using 'memfunc' on class that contains a classname.",
    "timeToFix": 5
  },
  {
    "patternId": "memsetClassReference",
    "title": "Using 'memfunc' on class that contains a reference.",
    "description": "Using 'memfunc' on class that contains a reference.",
    "timeToFix": 5
  },
  {
    "patternId": "memsetClassFloat",
    "title": "Using memset() on class which contains a floating point number.",
    "description": "Using memset() on class which contains a floating point number.",
    "timeToFix": 5
  },
  {
    "patternId": "mallocOnClassWarning",
    "title": "Memory for class instance allocated with malloc(), but class provides constructors.",
    "description": "Memory for class instance allocated with malloc(), but class provides constructors.",
    "timeToFix": 5
  },
  {
    "patternId": "mallocOnClassError",
    "title": "Memory for class instance allocated with malloc(), but class contains a std::string.",
    "description": "Memory for class instance allocated with malloc(), but class contains a std::string.",
    "timeToFix": 5
  },
  {
    "patternId": "operatorEq",
    "title": "'class::operator=' should return 'class &'.",
    "description": "'class::operator=' should return 'class &'.",
    "timeToFix": 5
  },
  {
    "patternId": "virtualDestructor",
    "title": "Class 'Base' which is inherited by class 'Derived' does not have a virtual destructor.",
    "description": "Class 'Base' which is inherited by class 'Derived' does not have a virtual destructor.",
    "timeToFix": 5
  },
  {
    "patternId": "thisSubtraction",
    "title": "Suspicious pointer subtraction. Did you intend to write '->'?",
    "description": "Suspicious pointer subtraction. Did you intend to write '->'?",
    "timeToFix": 5
  },
  {
    "patternId": "operatorEqRetRefThis",
    "title": "'operator=' should return reference to 'this' instance.",
    "description": "'operator=' should return reference to 'this' instance.",
    "timeToFix": 5
  },
  {
    "patternId": "operatorEqMissingReturnStatement",
    "title": "No 'return' statement in non-void function causes undefined behavior.",
    "description": "No 'return' statement in non-void function causes undefined behavior.",
    "timeToFix": 5
  },
  {
    "patternId": "operatorEqShouldBeLeftUnimplemented",
    "title": "'operator=' should either return reference to 'this' instance or be declared private and left unimplemented.",
    "description": "'operator=' should either return reference to 'this' instance or be declared private and left unimplemented.",
    "timeToFix": 5
  },
  {
    "patternId": "operatorEqToSelf",
    "title": "'operator=' should check for assignment to self to avoid problems with dynamic memory.",
    "description": "'operator=' should check for assignment to self to avoid problems with dynamic memory.",
    "timeToFix": 5
  },
  {
    "patternId": "useInitializationList",
    "title": "Variable 'variable' is assigned in constructor body.",
    "description": "Variable 'variable' is assigned in constructor body. Consider performing initialization in initialization list.",
    "timeToFix": 5
  },
  {
    "patternId": "selfInitialization",
    "title": "Member variable 'var' is initialized by itself.",
    "description": "Member variable 'var' is initialized by itself.",
    "timeToFix": 5
  },
  {
    "patternId": "duplInheritedMember",
    "title": "The class 'class' defines member variable with name 'variable' also defined in its parent class 'class'.",
    "description": "The class 'class' defines member variable with name 'variable' also defined in its parent class 'class'.",
    "timeToFix": 5
  },
  {
    "patternId": "assignIfError",
    "title": "Mismatching assignment and comparison, comparison '' is always false.",
    "description": "Mismatching assignment and comparison, comparison '' is always false.",
    "timeToFix": 5
  },
  {
    "patternId": "badBitmaskCheck",
    "title": "Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?",
    "description": "Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?",
    "timeToFix": 5
  },
  {
    "patternId": "comparisonError",
    "title": "Expression '(X & 0x6) == 0x1' is always false.",
    "description": "Expression '(X & 0x6) == 0x1' is always false.",
    "timeToFix": 5
  },
  {
    "patternId": "multiCondition",
    "title": "Expression is always false because 'else if' condition matches previous condition at line 1.",
    "description": "Expression is always false because 'else if' condition matches previous condition at line 1.",
    "timeToFix": 5
  },
  {
    "patternId": "mismatchingBitAnd",
    "title": "Mismatching bitmasks. Result is always 0 (X = Y & 0xf0; Z = X & 0x1; => Z=0).",
    "description": "Mismatching bitmasks. Result is always 0 (X = Y & 0xf0; Z = X & 0x1; => Z=0).",
    "timeToFix": 5
  },
  {
    "patternId": "oppositeInnerCondition",
    "title": "Opposite conditions in nested 'if' blocks lead to a dead code block.",
    "description": "Opposite conditions in nested 'if' blocks lead to a dead code block.",
    "timeToFix": 5
  },
  {
    "patternId": "incorrectLogicOperator",
    "title": "Logical disjunction always evaluates to true: foo > 3 && foo < 4.",
    "description": "Logical disjunction always evaluates to true: foo > 3 && foo < 4.",
    "timeToFix": 5
  },
  {
    "patternId": "redundantCondition",
    "title": "Redundant condition: If x > 11 the condition x > 10 is always true.",
    "description": "Redundant condition: If x > 11 the condition x > 10 is always true.",
    "timeToFix": 5
  },
  {
    "patternId": "moduloAlwaysTrueFalse",
    "title": "Comparison of modulo result is predetermined, because it is always less than 1.",
    "description": "Comparison of modulo result is predetermined, because it is always less than 1.",
    "timeToFix": 5
  },
  {
    "patternId": "clarifyCondition",
    "title": "Suspicious condition (assignment + comparison); Clarify expression with parentheses.",
    "description": "Suspicious condition (assignment + comparison); Clarify expression with parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "knownConditionTrueFalse",
    "title": "Condition 'x' is always true",
    "description": "Condition 'x' is always true",
    "timeToFix": 5
  },
  {
    "patternId": "exceptThrowInDestructor",
    "title": "Class Class is not safe, destructor throws exception",
    "description": "Class Class is not safe, destructor throws exception",
    "timeToFix": 5
  },
  {
    "patternId": "exceptDeallocThrow",
    "title": "Exception thrown in invalid state, 'p' points at deallocated memory.",
    "description": "Exception thrown in invalid state, 'p' points at deallocated memory.",
    "timeToFix": 5
  },
  {
    "patternId": "exceptRethrowCopy",
    "title": "Throwing a copy of the caught exception instead of rethrowing the original exception.",
    "description": "Throwing a copy of the caught exception instead of rethrowing the original exception.",
    "timeToFix": 5
  },
  {
    "patternId": "catchExceptionByValue",
    "title": "Exception should be caught by reference.",
    "description": "Exception should be caught by reference.",
    "timeToFix": 5
  },
  {
    "patternId": "throwInNoexceptFunction",
    "title": "Exception thrown in function declared not to throw exceptions.",
    "description": "Exception thrown in function declared not to throw exceptions.",
    "timeToFix": 5
  },
  {
    "patternId": "coutCerrMisusage",
    "title": "Invalid usage of output stream: '<< std::cout'.",
    "description": "Invalid usage of output stream: '<< std::cout'.",
    "timeToFix": 5
  },
  {
    "patternId": "fflushOnInputStream",
    "title": "fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems.",
    "description": "fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems.",
    "timeToFix": 5
  },
  {
    "patternId": "IOWithoutPositioning",
    "title": "Read and write operations without a call to a positioning function",
    "description": "Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.",
    "timeToFix": 5
  },
  {
    "patternId": "readWriteOnlyFile",
    "title": "Read operation on a file that was opened only for writing.",
    "description": "Read operation on a file that was opened only for writing.",
    "timeToFix": 5
  },
  {
    "patternId": "writeReadOnlyFile",
    "title": "Write operation on a file that was opened only for reading.",
    "description": "Write operation on a file that was opened only for reading.",
    "timeToFix": 5
  },
  {
    "patternId": "useClosedFile",
    "title": "Used file that is not opened.",
    "description": "Used file that is not opened.",
    "timeToFix": 5
  },
  {
    "patternId": "seekOnAppendedFile",
    "title": "Repositioning operation performed on a file opened in append mode has no effect.",
    "description": "Repositioning operation performed on a file opened in append mode has no effect.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidscanf",
    "title": "scanf without field width limits can crash with huge input data.",
    "description": "scanf without field width limits can crash with huge input data.",
    "timeToFix": 5
  },
  {
    "patternId": "wrongPrintfScanfArgNum",
    "title": "printf format string requires 3 parameters but only 2 are given.",
    "description": "printf format string requires 3 parameters but only 2 are given.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidScanfArgType_s",
    "title": "%s in format string (no. 1) requires a 'char *' but the argument type is Unknown.",
    "description": "%s in format string (no. 1) requires a 'char *' but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidScanfArgType_int",
    "title": "%d in format string (no. 1) requires 'int *' but the argument type is Unknown.",
    "description": "%d in format string (no. 1) requires 'int *' but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidScanfArgType_float",
    "title": "%f in format string (no. 1) requires 'float *' but the argument type is Unknown.",
    "description": "%f in format string (no. 1) requires 'float *' but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidPrintfArgType_s",
    "title": "%s in format string (no. 1) requires 'char *' but the argument type is Unknown.",
    "description": "%s in format string (no. 1) requires 'char *' but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidPrintfArgType_n",
    "title": "%n in format string (no. 1) requires 'int *' but the argument type is Unknown.",
    "description": "%n in format string (no. 1) requires 'int *' but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidPrintfArgType_p",
    "title": "%p in format string (no. 1) requires an address but the argument type is Unknown.",
    "description": "%p in format string (no. 1) requires an address but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidPrintfArgType_int",
    "title": "%X in format string (no. 1) requires 'unsigned int' but the argument type is Unknown.",
    "description": "%X in format string (no. 1) requires 'unsigned int' but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidPrintfArgType_uint",
    "title": "%u in format string (no. 1) requires 'unsigned int' but the argument type is Unknown.",
    "description": "%u in format string (no. 1) requires 'unsigned int' but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidPrintfArgType_sint",
    "title": "%i in format string (no. 1) requires 'int' but the argument type is Unknown.",
    "description": "%i in format string (no. 1) requires 'int' but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidPrintfArgType_float",
    "title": "%f in format string (no. 1) requires 'double' but the argument type is Unknown.",
    "description": "%f in format string (no. 1) requires 'double' but the argument type is Unknown.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidLengthModifierError",
    "title": "'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.",
    "description": "'I' in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidScanfFormatWidth",
    "title": "Width 5 given in format string (no. 10) is larger than destination buffer '[0]', use %-1s to prevent overflowing it.",
    "description": "Width 5 given in format string (no. 10) is larger than destination buffer '[0]', use %-1s to prevent overflowing it.",
    "timeToFix": 5
  },
  {
    "patternId": "wrongPrintfScanfParameterPositionError",
    "title": "printf: referencing parameter 2 while 1 arguments given",
    "description": "printf: referencing parameter 2 while 1 arguments given",
    "timeToFix": 5
  },
  {
    "patternId": "deallocret",
    "title": "Returning/dereferencing 'p' after it is deallocated / released",
    "description": "Returning/dereferencing 'p' after it is deallocated / released",
    "timeToFix": 5
  },
  {
    "patternId": "doubleFree",
    "title": "Memory pointed to by 'varname' is freed twice.",
    "description": "Memory pointed to by 'varname' is freed twice.",
    "timeToFix": 5
  },
  {
    "patternId": "leakNoVarFunctionCall",
    "title": "Allocation with funcName, funcName doesn't release it.",
    "description": "Allocation with funcName, funcName doesn't release it.",
    "timeToFix": 5
  },
  {
    "patternId": "leakReturnValNotUsed",
    "title": "Return value of allocation function 'funcName' is not stored.",
    "description": "Return value of allocation function 'funcName' is not stored.",
    "timeToFix": 5
  },
  {
    "patternId": "publicAllocationError",
    "title": "Possible leak in public function",
    "description": "Possible leak in public function. The pointer 'varname' is not deallocated before it is allocated.",
    "timeToFix": 5
  },
  {
    "patternId": "unsafeClassCanLeak",
    "title": "Class 'class' is unsafe, 'class::varname' can leak by wrong usage.",
    "description": "Class 'class' is unsafe, 'class::varname' can leak by wrong usage.",
    "timeToFix": 5
  },
  {
    "patternId": "memleak",
    "title": "Memory leak: varname",
    "description": "Memory leak: varname",
    "timeToFix": 5
  },
  {
    "patternId": "resourceLeak",
    "title": "Resource leak: varname",
    "description": "Resource leak: varname",
    "timeToFix": 5
  },
  {
    "patternId": "deallocDealloc",
    "title": "Deallocating a deallocated pointer: varname",
    "description": "Deallocating a deallocated pointer: varname",
    "timeToFix": 5
  },
  {
    "patternId": "deallocuse",
    "title": "Dereferencing 'varname' after it is deallocated / released",
    "description": "Dereferencing 'varname' after it is deallocated / released",
    "timeToFix": 5
  },
  {
    "patternId": "mismatchSize",
    "title": "The allocated size sz is not a multiple of the underlying type's size.",
    "description": "The allocated size sz is not a multiple of the underlying type's size.",
    "timeToFix": 5
  },
  {
    "patternId": "mismatchAllocDealloc",
    "title": "Mismatching allocation and deallocation: varname",
    "description": "Mismatching allocation and deallocation: varname",
    "timeToFix": 5
  },
  {
    "patternId": "memleakOnRealloc",
    "title": "Common realloc mistake: 'varname' nulled but not freed upon failure",
    "description": "Common realloc mistake: 'varname' nulled but not freed upon failure",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionscrypt",
    "title": "Non reentrant function 'crypt' called",
    "description": "Non reentrant function 'crypt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsctermid",
    "title": "Non reentrant function 'ctermid' called",
    "description": "Non reentrant function 'ctermid' called. For threadsafe applications it is recommended to use the reentrant replacement function 'ctermid_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsecvt",
    "title": "Non reentrant function 'ecvt' called",
    "description": "Non reentrant function 'ecvt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'ecvt_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsfcvt",
    "title": "Non reentrant function 'fcvt' called",
    "description": "Non reentrant function 'fcvt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'fcvt_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsfgetgrent",
    "title": "Non reentrant function 'fgetgrent' called",
    "description": "Non reentrant function 'fgetgrent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetgrent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsfgetpwent",
    "title": "Non reentrant function 'fgetpwent' called",
    "description": "Non reentrant function 'fgetpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetpwent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsfgetspent",
    "title": "Non reentrant function 'fgetspent' called",
    "description": "Non reentrant function 'fgetspent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'fgetspent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgcvt",
    "title": "Non reentrant function 'gcvt' called",
    "description": "Non reentrant function 'gcvt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'gcvt_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetgrent",
    "title": "Non reentrant function 'getgrent' called",
    "description": "Non reentrant function 'getgrent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetgrgid",
    "title": "Non reentrant function 'getgrgid' called",
    "description": "Non reentrant function 'getgrgid' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrgid_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetgrnam",
    "title": "Non reentrant function 'getgrnam' called",
    "description": "Non reentrant function 'getgrnam' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getgrnam_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgethostbyaddr",
    "title": "Non reentrant function 'gethostbyaddr' called",
    "description": "Non reentrant function 'gethostbyaddr' called. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyaddr_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgethostbyname",
    "title": "Non reentrant function 'gethostbyname' called",
    "description": "Non reentrant function 'gethostbyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyname_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgethostbyname2",
    "title": "Non reentrant function 'gethostbyname2' called",
    "description": "Non reentrant function 'gethostbyname2' called. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostbyname2_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgethostent",
    "title": "Non reentrant function 'gethostent' called",
    "description": "Non reentrant function 'gethostent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'gethostent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetlogin",
    "title": "Non reentrant function 'getlogin' called",
    "description": "Non reentrant function 'getlogin' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getlogin_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetnetbyaddr",
    "title": "Non reentrant function 'getnetbyaddr' called",
    "description": "Non reentrant function 'getnetbyaddr' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetbyaddr_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetnetbyname",
    "title": "Non reentrant function 'getnetbyname' called",
    "description": "Non reentrant function 'getnetbyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetbyname_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetnetgrent",
    "title": "Non reentrant function 'getnetgrent' called",
    "description": "Non reentrant function 'getnetgrent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getnetgrent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetprotobyname",
    "title": "Non reentrant function 'getprotobyname' called",
    "description": "Non reentrant function 'getprotobyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getprotobyname_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetpwent",
    "title": "Non reentrant function 'getpwent' called",
    "description": "Non reentrant function 'getpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetpwnam",
    "title": "Non reentrant function 'getpwnam' called",
    "description": "Non reentrant function 'getpwnam' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwnam_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetpwuid",
    "title": "Non reentrant function 'getpwuid' called",
    "description": "Non reentrant function 'getpwuid' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwuid_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetrpcbyname",
    "title": "Non reentrant function 'getrpcbyname' called",
    "description": "Non reentrant function 'getrpcbyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcbyname_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetrpcbynumber",
    "title": "Non reentrant function 'getrpcbynumber' called",
    "description": "Non reentrant function 'getrpcbynumber' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcbynumber_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetrpcent",
    "title": "Non reentrant function 'getrpcent' called",
    "description": "Non reentrant function 'getrpcent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getrpcent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetservbyname",
    "title": "Non reentrant function 'getservbyname' called",
    "description": "Non reentrant function 'getservbyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getservbyname_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetservbyport",
    "title": "Non reentrant function 'getservbyport' called",
    "description": "Non reentrant function 'getservbyport' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getservbyport_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetservent",
    "title": "Non reentrant function 'getservent' called",
    "description": "Non reentrant function 'getservent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getservent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetspent",
    "title": "Non reentrant function 'getspent' called",
    "description": "Non reentrant function 'getspent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getspent_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgetspnam",
    "title": "Non reentrant function 'getspnam' called",
    "description": "Non reentrant function 'getspnam' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getspnam_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsgmtime",
    "title": "Non reentrant function 'gmtime' called",
    "description": "Non reentrant function 'gmtime' called. For threadsafe applications it is recommended to use the reentrant replacement function 'gmtime_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionslocaltime",
    "title": "Non reentrant function 'localtime' called",
    "description": "Non reentrant function 'localtime' called. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsreaddir",
    "title": "Non reentrant function 'readdir' called",
    "description": "Non reentrant function 'readdir' called. For threadsafe applications it is recommended to use the reentrant replacement function 'readdir_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsstrtok",
    "title": "Non reentrant function 'strtok' called",
    "description": "Non reentrant function 'strtok' called. For threadsafe applications it is recommended to use the reentrant replacement function 'strtok_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionstempnam",
    "title": "Non reentrant function 'tempnam' called",
    "description": "Non reentrant function 'tempnam' called. For threadsafe applications it is recommended to use the reentrant replacement function 'tempnam_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nonreentrantFunctionsttyname",
    "title": "Non reentrant function 'ttyname' called",
    "description": "Non reentrant function 'ttyname' called. For threadsafe applications it is recommended to use the reentrant replacement function 'ttyname_r'.",
    "timeToFix": 5
  },
  {
    "patternId": "nullPointer",
    "title": "Null pointer dereference",
    "description": "Null pointer dereference",
    "timeToFix": 5
  },
  {
    "patternId": "nullPointerDefaultArg",
    "title": "Possible null pointer dereference if the default parameter value is used: pointer",
    "description": "Possible null pointer dereference if the default parameter value is used: pointer",
    "timeToFix": 5
  },
  {
    "patternId": "nullPointerRedundantCheck",
    "title": "Either the condition is redundant or there is possible null pointer dereference: pointer.",
    "description": "Either the condition is redundant or there is possible null pointer dereference: pointer.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsgets",
    "title": "Obsolete function 'gets' called",
    "description": "Obsolete function 'gets' called. It is recommended to use the function 'fgets' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsalloca",
    "title": "Obsolete function 'alloca' called",
    "description": "Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsasctime",
    "title": "Obsolete function 'asctime' called",
    "description": "Obsolete function 'asctime' called. It is recommended to use the function 'strftime' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsasctime_r",
    "title": "Obsolete function 'asctime_r' called",
    "description": "Obsolete function 'asctime_r' called. It is recommended to use the function 'strftime' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsbcmp",
    "title": "Obsolete function 'bcmp' called",
    "description": "Obsolete function 'bcmp' called. It is recommended to use the function 'memcmp' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsbcopy",
    "title": "Obsolete function 'bcopy' called",
    "description": "Obsolete function 'bcopy' called. It is recommended to use the 'memmove' or 'memcpy' function instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsbsd_signal",
    "title": "Obsolete function 'bsd_signal' called",
    "description": "Obsolete function 'bsd_signal' called. It is recommended to use the function 'sigaction' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsbzero",
    "title": "Obsolete function 'bzero' called",
    "description": "Obsolete function 'bzero' called. It is recommended to use the function 'memset' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsctime_r",
    "title": "Obsolete function 'ctime_r' called",
    "description": "Obsolete function 'ctime_r' called. It is recommended to use the function 'strftime' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsecvt",
    "title": "Obsolete function 'ecvt' called",
    "description": "Obsolete function 'ecvt' called. It is recommended to use the function 'sprintf' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsfcvt",
    "title": "Obsolete function 'fcvt' called",
    "description": "Obsolete function 'fcvt' called. It is recommended to use the function 'sprintf' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsftime",
    "title": "Obsolete function 'ftime' called",
    "description": "Obsolete function 'ftime' called. It is recommended to use time(), gettimeofday() or clock_gettime() instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsgcvt",
    "title": "Obsolete function 'gcvt' called",
    "description": "Obsolete function 'gcvt' called. It is recommended to use the function 'sprintf' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsgetcontext",
    "title": "Obsolete function 'getcontext' called",
    "description": "Obsolete function 'getcontext' called. Due to portability issues, applications are recommended to be rewritten to use POSIX threads.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsgethostbyaddr",
    "title": "Obsolete function 'gethostbyaddr' called",
    "description": "Obsolete function 'gethostbyaddr' called. It is recommended to use the function 'getnameinfo' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsgethostbyname",
    "title": "Obsolete function 'gethostbyname' called",
    "description": "Obsolete function 'gethostbyname' called. It is recommended to use the function 'getaddrinfo' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsgetwd",
    "title": "Obsolete function 'getwd' called",
    "description": "Obsolete function 'getwd' called. It is recommended to use the function 'getcwd' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsindex",
    "title": "Obsolete function 'index' called",
    "description": "Obsolete function 'index' called. It is recommended to use the function 'strchr' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsmakecontext",
    "title": "Obsolete function 'makecontext' called",
    "description": "Obsolete function 'makecontext' called. Due to portability issues, applications are recommended to be rewritten to use POSIX threads.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionspthread_attr_getstackaddr",
    "title": "Obsolete function 'pthread_attr_getstackaddr' called",
    "description": "Obsolete function 'pthread_attr_getstackaddr' called. It is recommended to use the function 'pthread_attr_getstack' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionspthread_attr_setstackaddr",
    "title": "Obsolete function 'pthread_attr_setstackaddr' called",
    "description": "Obsolete function 'pthread_attr_setstackaddr' called. It is recommended to use the function 'pthread_attr_setstack' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsrand_r",
    "title": "Obsolete function 'rand_r' called",
    "description": "Obsolete function 'rand_r' called. It is recommended to use the function 'rand' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsrindex",
    "title": "Obsolete function 'rindex' called",
    "description": "Obsolete function 'rindex' called. It is recommended to use the function 'strrchr' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsscalbln",
    "title": "Obsolete function 'scalb' called",
    "description": "Obsolete function 'scalb' called. It is recommended to use 'scalbln', 'scalblnf' or 'scalblnl' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsswapcontext",
    "title": "Obsolete function 'swapcontext' called",
    "description": "Obsolete function 'swapcontext' called. Due to portability issues, applications are recommended to be rewritten to use POSIX threads.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionstmpnam",
    "title": "Obsolete function 'tmpnam' called",
    "description": "Obsolete function 'tmpnam' called. It is recommended to use 'tmpfile', 'mkstemp' or 'mkdtemp' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionstmpnam_r",
    "title": "Obsolete function 'tmpnam_r' called",
    "description": "Obsolete function 'tmpnam_r' called. It is recommended to use 'tmpfile', 'mkstemp' or 'mkdtemp' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsualarm",
    "title": "Obsolete function 'ualarm' called",
    "description": "Obsolete function 'ualarm' called. It is recommended to use 'timer_create', 'timer_delete', 'timer_getoverrun', 'timer_gettime' or 'timer_settime' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsusleep",
    "title": "Obsolete function 'usleep' called",
    "description": "Obsolete function 'usleep' called. It is recommended to use the 'nanosleep' or 'setitimer' function instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsutime",
    "title": "Obsolete function 'utime' called",
    "description": "Obsolete function 'utime' called. It is recommended to use the function 'utimensat' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionsvfork",
    "title": "Obsolete function 'vfork' called",
    "description": "Obsolete function 'vfork' called. It is recommended to use the function 'fork' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "obsoleteFunctionswcswcs",
    "title": "Obsolete function 'wcswcs' called",
    "description": "Obsolete function 'wcswcs' called. It is recommended to use the function 'wcsstr' instead.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidFunctionArg",
    "title": "Invalid func_name() argument nr 1",
    "description": "Invalid func_name() argument nr 1",
    "timeToFix": 5
  },
  {
    "patternId": "invalidFunctionArgBool",
    "title": "Invalid func_name() argument nr 1. A non-boolean value is required.",
    "description": "Invalid func_name() argument nr 1. A non-boolean value is required.",
    "timeToFix": 5
  },
  {
    "patternId": "zerodiv",
    "title": "Division by zero.",
    "description": "Division by zero.",
    "timeToFix": 5
  },
  {
    "patternId": "zerodivcond",
    "title": "Either the condition is redundant or there is division by zero at line 0.",
    "description": "Either the condition is redundant or there is division by zero at line 0.",
    "timeToFix": 5
  },
  {
    "patternId": "unusedScopedObject",
    "title": "Instance of 'varname' object is destroyed immediately.",
    "description": "Instance of 'varname' object is destroyed immediately.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidPointerCast",
    "title": "Casting between float* and double* which have an incompatible binary data representation.",
    "description": "Casting between float* and double* which have an incompatible binary data representation.",
    "timeToFix": 5
  },
  {
    "patternId": "shiftNegative",
    "title": "Shifting by a negative value is undefined behaviour",
    "description": "Shifting by a negative value is undefined behaviour",
    "timeToFix": 5
  },
  {
    "patternId": "wrongPipeParameterSize",
    "title": "Buffer 'varname' must have size of 2 integers if used as parameter of pipe().",
    "description": "Buffer 'varname' must have size of 2 integers if used as parameter of pipe().",
    "timeToFix": 5
  },
  {
    "patternId": "raceAfterInterlockedDecrement",
    "title": "Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.",
    "description": "Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.",
    "timeToFix": 5
  },
  {
    "patternId": "redundantCopy",
    "title": "Buffer 'var' is being written before its old content has been used.",
    "description": "Buffer 'var' is being written before its old content has been used.",
    "timeToFix": 5
  },
  {
    "patternId": "redundantAssignment",
    "title": "Variable 'var' is reassigned a value before the old one has been used.",
    "description": "Variable 'var' is reassigned a value before the old one has been used.",
    "timeToFix": 5
  },
  {
    "patternId": "comparisonFunctionIsAlwaysTrueOrFalse",
    "title": "Comparison of two identical variables with isless(varName,varName) always evaluates to false.",
    "description": "Comparison of two identical variables with isless(varName,varName) always evaluates to false.",
    "timeToFix": 5
  },
  {
    "patternId": "checkCastIntToCharAndBack",
    "title": "Storing func_name() return value in char variable and then comparing with EOF.",
    "description": "Storing func_name() return value in char variable and then comparing with EOF.",
    "timeToFix": 5
  },
  {
    "patternId": "cstyleCast",
    "title": "C-style pointer casting",
    "description": "C-style pointer casting",
    "timeToFix": 5
  },
  {
    "patternId": "passedByValue",
    "title": "Function parameter 'parametername' should be passed by reference.",
    "description": "Function parameter 'parametername' should be passed by reference.",
    "timeToFix": 5
  },
  {
    "patternId": "constStatement",
    "title": "Redundant code: Found a statement that begins with type constant.",
    "description": "Redundant code: Found a statement that begins with type constant.",
    "timeToFix": 5
  },
  {
    "patternId": "charArrayIndex",
    "title": "Signed 'char' type used as array index.",
    "description": "Signed 'char' type used as array index.",
    "timeToFix": 5
  },
  {
    "patternId": "charBitOp",
    "title": "When using 'char' variables in bit operations, sign extension can generate unexpected results.",
    "description": "When using 'char' variables in bit operations, sign extension can generate unexpected results.",
    "timeToFix": 5
  },
  {
    "patternId": "variableScope",
    "title": "The scope of the variable 'varname' can be reduced.",
    "description": "The scope of the variable 'varname' can be reduced.",
    "timeToFix": 5
  },
  {
    "patternId": "redundantAssignInSwitch",
    "title": "Variable 'var' is reassigned a value before the old one has been used. 'break;' missing?",
    "description": "Variable 'var' is reassigned a value before the old one has been used. 'break;' missing?",
    "timeToFix": 5
  },
  {
    "patternId": "redundantCopyInSwitch",
    "title": "Buffer 'var' is being written before its old content has been used. 'break;' missing?",
    "description": "Buffer 'var' is being written before its old content has been used. 'break;' missing?",
    "timeToFix": 5
  },
  {
    "patternId": "switchCaseFallThrough",
    "title": "Switch falls through case without comment. 'break;' missing?",
    "description": "Switch falls through case without comment. 'break;' missing?",
    "timeToFix": 5
  },
  {
    "patternId": "selfAssignment",
    "title": "Redundant assignment of 'varname' to itself.",
    "description": "Redundant assignment of 'varname' to itself.",
    "timeToFix": 5
  },
  {
    "patternId": "wrongmathcall",
    "title": "Passing value '#' to #() leads to implementation-defined result.",
    "description": "Passing value '#' to #() leads to implementation-defined result.",
    "timeToFix": 5
  },
  {
    "patternId": "unpreciseMathCall",
    "title": "Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.",
    "description": "Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.",
    "timeToFix": 5
  },
  {
    "patternId": "memsetZeroBytes",
    "title": "memset() called to fill 0 bytes of 'varname'.",
    "description": "memset() called to fill 0 bytes of 'varname'.",
    "timeToFix": 5
  },
  {
    "patternId": "memsetFloat",
    "title": "The 2nd memset() argument 'varname' is a float, its representation is implementation defined.",
    "description": "The 2nd memset() argument 'varname' is a float, its representation is implementation defined.",
    "timeToFix": 5
  },
  {
    "patternId": "memsetValueOutOfRange",
    "title": "The 2nd memset() argument 'varname' doesn't fit into an 'unsigned char'.",
    "description": "The 2nd memset() argument 'varname' doesn't fit into an 'unsigned char'.",
    "timeToFix": 5
  },
  {
    "patternId": "clarifyCalculation",
    "title": "Clarify calculation precedence for '+' and '?'.",
    "description": "Clarify calculation precedence for '+' and '?'.",
    "timeToFix": 5
  },
  {
    "patternId": "clarifyStatement",
    "title": "Ineffective statement similar to '*A++;'. Did you intend to write '(*A)++;'?",
    "description": "Ineffective statement similar to '*A++;'. Did you intend to write '(*A)++;'?",
    "timeToFix": 5
  },
  {
    "patternId": "duplicateExpression",
    "title": "Same expression on both sides of '&&'.",
    "description": "Same expression on both sides of '&&'.",
    "timeToFix": 5
  },
  {
    "patternId": "duplicateExpressionTernary",
    "title": "Same expression in both branches of ternary operator.",
    "description": "Same expression in both branches of ternary operator.",
    "timeToFix": 5
  },
  {
    "patternId": "duplicateBreak",
    "title": "Consecutive return, break, continue, goto or throw statements are unnecessary.",
    "description": "Consecutive return, break, continue, goto or throw statements are unnecessary.",
    "timeToFix": 5
  },
  {
    "patternId": "unreachableCode",
    "title": "Statements following return, break, continue, goto or throw will never be executed.",
    "description": "Statements following return, break, continue, goto or throw will never be executed.",
    "timeToFix": 5
  },
  {
    "patternId": "unsignedLessThanZero",
    "title": "Checking if unsigned variable 'varname' is less than zero.",
    "description": "Checking if unsigned variable 'varname' is less than zero.",
    "timeToFix": 5
  },
  {
    "patternId": "unsignedPositive",
    "title": "Unsigned variable 'varname' can't be negative so it is unnecessary to test it.",
    "description": "Unsigned variable 'varname' can't be negative so it is unnecessary to test it.",
    "timeToFix": 5
  },
  {
    "patternId": "pointerLessThanZero",
    "title": "A pointer can not be negative so it is either pointless or an error to check if it is.",
    "description": "A pointer can not be negative so it is either pointless or an error to check if it is.",
    "timeToFix": 5
  },
  {
    "patternId": "pointerPositive",
    "title": "A pointer can not be negative so it is either pointless or an error to check if it is not.",
    "description": "A pointer can not be negative so it is either pointless or an error to check if it is not.",
    "timeToFix": 5
  },
  {
    "patternId": "varFuncNullUB",
    "title": "Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.",
    "description": "Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.",
    "timeToFix": 5
  },
  {
    "patternId": "nanInArithmeticExpression",
    "title": "Using NaN/Inf in a computation.",
    "description": "Using NaN/Inf in a computation.",
    "timeToFix": 5
  },
  {
    "patternId": "commaSeparatedReturn",
    "title": "Comma is used in return statement. The comma can easily be misread as a ';'.",
    "description": "Comma is used in return statement. The comma can easily be misread as a ';'.",
    "timeToFix": 5
  },
  {
    "patternId": "ignoredReturnValue",
    "title": "Return value of function malloc() is not used.",
    "description": "Return value of function malloc() is not used.",
    "timeToFix": 5
  },
  {
    "patternId": "redundantPointerOp",
    "title": "Redundant pointer operation on varname - it's already a pointer.",
    "description": "Redundant pointer operation on varname - it's already a pointer.",
    "timeToFix": 5
  },
  {
    "patternId": "unusedLabel",
    "title": "Label '' is not used.",
    "description": "Label '' is not used.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidIterator1",
    "title": "Invalid iterator: iterator",
    "description": "Invalid iterator: iterator",
    "timeToFix": 5
  },
  {
    "patternId": "iterators",
    "title": "Same iterator is used with different containers 'container1' and 'container2'.",
    "description": "Same iterator is used with different containers 'container1' and 'container2'.",
    "timeToFix": 5
  },
  {
    "patternId": "mismatchingContainers",
    "title": "Iterators of different containers are used together.",
    "description": "Iterators of different containers are used together.",
    "timeToFix": 5
  },
  {
    "patternId": "eraseDereference",
    "title": "Invalid iterator 'iter' used.",
    "description": "Invalid iterator 'iter' used.",
    "timeToFix": 5
  },
  {
    "patternId": "stlOutOfBounds",
    "title": "When i==foo.size(), foo[i] is out of bounds.",
    "description": "When i==foo.size(), foo[i] is out of bounds.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidIterator2",
    "title": "After push_back|push_front|insert(), the iterator 'iterator' may be invalid.",
    "description": "After push_back|push_front|insert(), the iterator 'iterator' may be invalid.",
    "timeToFix": 5
  },
  {
    "patternId": "invalidPointer",
    "title": "Invalid pointer 'pointer' after push_back().",
    "description": "Invalid pointer 'pointer' after push_back().",
    "timeToFix": 5
  },
  {
    "patternId": "stlBoundaries",
    "title": "Dangerous iterator comparison using operator< on 'std::container'.",
    "description": "Dangerous iterator comparison using operator< on 'std::container'.",
    "timeToFix": 5
  },
  {
    "patternId": "stlIfFind",
    "title": "Suspicious condition. The result of find() is an iterator, but it is not properly checked.",
    "description": "Suspicious condition. The result of find() is an iterator, but it is not properly checked.",
    "timeToFix": 5
  },
  {
    "patternId": "stlIfStrFind",
    "title": "Inefficient usage of string::find() in condition; string::compare() would be faster.",
    "description": "Inefficient usage of string::find() in condition; string::compare() would be faster.",
    "timeToFix": 5
  },
  {
    "patternId": "stlcstr",
    "title": "Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.",
    "description": "Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.",
    "timeToFix": 5
  },
  {
    "patternId": "stlcstrReturn",
    "title": "Returning the result of c_str() in a function that returns std::string is slow and redundant.",
    "description": "Returning the result of c_str() in a function that returns std::string is slow and redundant.",
    "timeToFix": 5
  },
  {
    "patternId": "stlcstrParam",
    "title": "Passing the result of c_str() to a function that takes std::string as argument no. 0 is slow and redundant.",
    "description": "Passing the result of c_str() to a function that takes std::string as argument no. 0 is slow and redundant.",
    "timeToFix": 5
  },
  {
    "patternId": "stlSize",
    "title": "Possible inefficient checking for 'list' emptiness.",
    "description": "Possible inefficient checking for 'list' emptiness.",
    "timeToFix": 5
  },
  {
    "patternId": "StlMissingComparison",
    "title": "Missing bounds check for extra iterator increment in loop.",
    "description": "Missing bounds check for extra iterator increment in loop.",
    "timeToFix": 5
  },
  {
    "patternId": "redundantIfRemove",
    "title": "Redundant checking of STL container element existence before removing it.",
    "description": "Redundant checking of STL container element existence before removing it.",
    "timeToFix": 5
  },
  {
    "patternId": "useAutoPointerCopy",
    "title": "Copying 'auto_ptr' pointer to another does not create two equal objects since one has lost its ownership of the pointer.",
    "description": "Copying 'auto_ptr' pointer to another does not create two equal objects since one has lost its ownership of the pointer.",
    "timeToFix": 5
  },
  {
    "patternId": "useAutoPointerContainer",
    "title": "You can randomly lose access to pointers if you store 'auto_ptr' pointers in an STL container.",
    "description": "You can randomly lose access to pointers if you store 'auto_ptr' pointers in an STL container.",
    "timeToFix": 5
  },
  {
    "patternId": "useAutoPointerArray",
    "title": "Object pointed by an 'auto_ptr' is destroyed using operator 'delete'",
    "description": "Object pointed by an 'auto_ptr' is destroyed using operator 'delete'. You should not use 'auto_ptr' for pointers obtained with operator 'new[]'.",
    "timeToFix": 5
  },
  {
    "patternId": "useAutoPointerMalloc",
    "title": "Object pointed by an 'auto_ptr' is destroyed using operator 'delete'",
    "description": "Object pointed by an 'auto_ptr' is destroyed using operator 'delete'. You should not use 'auto_ptr' for pointers obtained with function 'malloc'.",
    "timeToFix": 5
  },
  {
    "patternId": "uselessCallsCompare",
    "title": "It is inefficient to call 'str.find(str)' as it always returns 0.",
    "description": "It is inefficient to call 'str.find(str)' as it always returns 0.",
    "timeToFix": 5
  },
  {
    "patternId": "uselessCallsSwap",
    "title": "It is inefficient to swap a object with itself by calling 'str.swap(str)'",
    "description": "It is inefficient to swap a object with itself by calling 'str.swap(str)'",
    "timeToFix": 5
  },
  {
    "patternId": "uselessCallsSubstr",
    "title": "Ineffective call of function 'substr' because it returns a copy of the object. Use operator= instead.",
    "description": "Ineffective call of function 'substr' because it returns a copy of the object. Use operator= instead.",
    "timeToFix": 5
  },
  {
    "patternId": "uselessCallsEmpty",
    "title": "Ineffective call of function 'empty()'. Did you intend to call 'clear()' instead?",
    "description": "Ineffective call of function 'empty()'. Did you intend to call 'clear()' instead?",
    "timeToFix": 5
  },
  {
    "patternId": "uselessCallsRemove",
    "title": "Return value of std::remove() ignored. Elements remain in container.",
    "description": "Return value of std::remove() ignored. Elements remain in container.",
    "timeToFix": 5
  },
  {
    "patternId": "derefInvalidIterator",
    "title": "Possible dereference of an invalid iterator: i",
    "description": "Possible dereference of an invalid iterator: i",
    "timeToFix": 5
  },
  {
    "patternId": "sizeofwithsilentarraypointer",
    "title": "Using 'sizeof' on array given as function argument returns size of a pointer.",
    "description": "Using 'sizeof' on array given as function argument returns size of a pointer.",
    "timeToFix": 5
  },
  {
    "patternId": "pointerSize",
    "title": "Size of pointer 'varname' used instead of size of its data.",
    "description": "Size of pointer 'varname' used instead of size of its data.",
    "timeToFix": 5
  },
  {
    "patternId": "sizeofDivisionMemfunc",
    "title": "Division by result of sizeof(). memset() expects a size in bytes, did you intend to multiply instead?",
    "description": "Division by result of sizeof(). memset() expects a size in bytes, did you intend to multiply instead?",
    "timeToFix": 5
  },
  {
    "patternId": "sizeofwithnumericparameter",
    "title": "Suspicious usage of 'sizeof' with a numeric constant as parameter.",
    "description": "Suspicious usage of 'sizeof' with a numeric constant as parameter.",
    "timeToFix": 5
  },
  {
    "patternId": "sizeofsizeof",
    "title": "Calling 'sizeof' on 'sizeof'.",
    "description": "Calling 'sizeof' on 'sizeof'.",
    "timeToFix": 5
  },
  {
    "patternId": "sizeofCalculation",
    "title": "Found calculation inside sizeof().",
    "description": "Found calculation inside sizeof().",
    "timeToFix": 5
  },
  {
    "patternId": "sizeofVoid",
    "title": "Behaviour of 'sizeof(void)' is not covered by the ISO C standard.",
    "description": "Behaviour of 'sizeof(void)' is not covered by the ISO C standard.",
    "timeToFix": 5
  },
  {
    "patternId": "sizeofDereferencedVoidPointer",
    "title": "'*varname' is of type 'void', the behaviour of 'sizeof(void)' is not covered by the ISO C standard.",
    "description": "'*varname' is of type 'void', the behaviour of 'sizeof(void)' is not covered by the ISO C standard.",
    "timeToFix": 5
  },
  {
    "patternId": "arithOperationsOnVoidPointer",
    "title": "'varname' is of type 'vartype'. When using void pointers in calculations, the behaviour is undefined.",
    "description": "'varname' is of type 'vartype'. When using void pointers in calculations, the behaviour is undefined.",
    "timeToFix": 5
  },
  {
    "patternId": "stringLiteralWrite",
    "title": "Modifying string literal directly or indirectly is undefined behaviour",
    "description": "Modifying string literal directly or indirectly is undefined behaviour",
    "timeToFix": 5
  },
  {
    "patternId": "sprintfOverlappingData",
    "title": "Undefined behavior: Variable 'varname' is used as parameter and destination in s[n]printf().",
    "description": "Undefined behavior: Variable 'varname' is used as parameter and destination in s[n]printf().",
    "timeToFix": 5
  },
  {
    "patternId": "strPlusChar",
    "title": "Unusual pointer arithmetic. A value of type 'char' is added to a string literal.",
    "description": "Unusual pointer arithmetic. A value of type 'char' is added to a string literal.",
    "timeToFix": 5
  },
  {
    "patternId": "incorrectStringCompare",
    "title": "String literal doesn't match length argument for substr().",
    "description": "String literal doesn't match length argument for substr().",
    "timeToFix": 5
  },
  {
    "patternId": "literalWithCharPtrCompare",
    "title": "String literal compared with variable 'foo'. Did you intend to use strcmp() instead?",
    "description": "String literal compared with variable 'foo'. Did you intend to use strcmp() instead?",
    "timeToFix": 5
  },
  {
    "patternId": "charLiteralWithCharPtrCompare",
    "title": "Char literal compared with pointer 'foo'. Did you intend to dereference it?",
    "description": "Char literal compared with pointer 'foo'. Did you intend to dereference it?",
    "timeToFix": 5
  },
  {
    "patternId": "incorrectStringBooleanError",
    "title": "Conversion of string literal to bool always evaluates to true.",
    "description": "Conversion of string literal to bool always evaluates to true.",
    "timeToFix": 5
  },
  {
    "patternId": "staticStringCompare",
    "title": "Unnecessary comparison of static strings.",
    "description": "Unnecessary comparison of static strings.",
    "timeToFix": 5
  },
  {
    "patternId": "stringCompare",
    "title": "Comparison of identical string variables.",
    "description": "Comparison of identical string variables.",
    "timeToFix": 5
  },
  {
    "patternId": "shiftTooManyBits",
    "title": "Shifting 32-bit value by 64 bits is undefined behaviour",
    "description": "Shifting 32-bit value by 64 bits is undefined behaviour",
    "timeToFix": 5
  },
  {
    "patternId": "integerOverflow",
    "title": "Signed integer overflow for expression ''",
    "description": "Signed integer overflow for expression ''",
    "timeToFix": 5
  },
  {
    "patternId": "signConversion",
    "title": "Suspicious code: sign conversion of var in calculation, even though var can have a negative value",
    "description": "Suspicious code: sign conversion of var in calculation, even though var can have a negative value",
    "timeToFix": 5
  },
  {
    "patternId": "truncLongCastAssignment",
    "title": "int result is assigned to long variable",
    "description": "int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information.",
    "timeToFix": 5
  },
  {
    "patternId": "truncLongCastReturn",
    "title": "int result is returned as long value",
    "description": "int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information.",
    "timeToFix": 5
  },
  {
    "patternId": "uninitstring",
    "title": "Dangerous usage of 'varname' (strncpy doesn't always null-terminate it).",
    "description": "Dangerous usage of 'varname' (strncpy doesn't always null-terminate it).",
    "timeToFix": 5
  },
  {
    "patternId": "uninitdata",
    "title": "Memory is allocated but not initialized: varname",
    "description": "Memory is allocated but not initialized: varname",
    "timeToFix": 5
  },
  {
    "patternId": "uninitvar",
    "title": "Uninitialized variable: varname",
    "description": "Uninitialized variable: varname",
    "timeToFix": 5
  },
  {
    "patternId": "uninitStructMember",
    "title": "Uninitialized struct member: a.b",
    "description": "Uninitialized struct member: a.b",
    "timeToFix": 5
  },
  {
    "patternId": "deadpointer",
    "title": "Dead pointer usage. Pointer 'pointer' is dead if it has been assigned '&x' at line 0.",
    "description": "Dead pointer usage. Pointer 'pointer' is dead if it has been assigned '&x' at line 0.",
    "timeToFix": 5
  },
  {
    "patternId": "unusedVariable",
    "title": "Unused variable: varname",
    "description": "Unused variable: varname",
    "timeToFix": 5
  },
  {
    "patternId": "unusedAllocatedMemory",
    "title": "Variable 'varname' is allocated memory that is never used.",
    "description": "Variable 'varname' is allocated memory that is never used.",
    "timeToFix": 5
  },
  {
    "patternId": "unreadVariable",
    "title": "Variable 'varname' is assigned a value that is never used.",
    "description": "Variable 'varname' is assigned a value that is never used.",
    "timeToFix": 5
  },
  {
    "patternId": "unassignedVariable",
    "title": "Variable 'varname' is not assigned a value.",
    "description": "Variable 'varname' is not assigned a value.",
    "timeToFix": 5
  },
  {
    "patternId": "unusedStructMember",
    "title": "struct or union member 'structname::variable' is never used.",
    "description": "struct or union member 'structname::variable' is never used.",
    "timeToFix": 5
  },
  {
    "patternId": "postfixOperator",
    "title": "Prefer prefix ++/-- operators for non-primitive types.",
    "description": "Prefer prefix ++/-- operators for non-primitive types.",
    "timeToFix": 5
  },
  {
    "patternId": "va_start_wrongParameter",
    "title": "'arg1' given to va_start() is not last named argument of the function",
    "description": "'arg1' given to va_start() is not last named argument of the function. Did you intend to pass 'arg2'?",
    "timeToFix": 5
  },
  {
    "patternId": "va_start_referencePassed",
    "title": "Using reference 'arg1' as parameter for va_start() results in undefined behaviour.",
    "description": "Using reference 'arg1' as parameter for va_start() results in undefined behaviour.",
    "timeToFix": 5
  },
  {
    "patternId": "va_end_missing",
    "title": "va_list 'vl' was opened but not closed by va_end().",
    "description": "va_list 'vl' was opened but not closed by va_end().",
    "timeToFix": 5
  },
  {
    "patternId": "va_list_usedBeforeStarted",
    "title": "va_list 'vl' used before va_start() was called.",
    "description": "va_list 'vl' used before va_start() was called.",
    "timeToFix": 5
  },
  {
    "patternId": "va_start_subsequentCalls",
    "title": "va_start() or va_copy() called subsequently on 'vl' without va_end() in between.",
    "description": "va_start() or va_copy() called subsequently on 'vl' without va_end() in between.",
    "timeToFix": 5
  },
  {
    "patternId": "unnecessaryForwardDeclaration",
    "title": "The variable 'name' forward declaration is unnecessary",
    "description": "The variable 'name' forward declaration is unnecessary. Type variable is already declared earlier.",
    "timeToFix": 5
  },
  {
    "patternId": "variableHidingEnum",
    "title": "variable 'name' hides enumerator with same name",
    "description": "variable 'name' hides enumerator with same name",
    "timeToFix": 5
  },
  {
    "patternId": "unnecessaryQualification",
    "title": "The extra qualification 'type' is unnecessary and is considered an error by many compilers.",
    "description": "The extra qualification 'type' is unnecessary and is considered an error by many compilers.",
    "timeToFix": 5
  },
  {
    "patternId": "missingInclude",
    "title": "Include file: not found.",
    "description": "Include file: not found.",
    "timeToFix": 5
  },
  {
    "patternId": "missingIncludeSystem",
    "title": "Include file: <> not found",
    "description": "Include file: <> not found. Please note: Cppcheck does not need standard library headers to get proper results.",
    "timeToFix": 5
  },
  {
    "patternId": "ConfigurationNotChecked",
    "title": "Skipping configuration 'X' since the value of 'X' is unknown",
    "description": "Skipping configuration 'X' since the value of 'X' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.",
    "timeToFix": 5
  },
  {
    "patternId": "preprocessorErrorDirective",
    "title": "#error message",
    "description": "#error message",
    "timeToFix": 5
  }
]
